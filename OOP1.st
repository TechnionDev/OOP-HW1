Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'math' stamp: 'db 4/3/2022 19:29'!derivative | newMonom|	newMonom := Monom new.	(exp = 0)	ifFalse: [newMonom coef: (coef) * ( exp); exp: exp-1. ^newMonom]	ifTrue: [newMonom initialize. ^newMonom]	! !!Monom methodsFor: 'math' stamp: 'db 4/3/2022 19:34'!integral |newMonom|	newMonom := Monom new.	newMonom coef: (( coef)//(( exp)+1)).	newMonom exp: (( exp)+1).	^newMonom	! !!Monom methodsFor: 'initialize-release' stamp: 'db 4/1/2022 22:04'!initialize	coef := 0.	exp:= 0.! !!Monom methodsFor: 'exp' stamp: 'db 4/1/2022 18:04'!exp 	^exp	! !!Monom methodsFor: 'exp' stamp: 'db 4/1/2022 22:04'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger>=0])	ifTrue: [exp := anInteger] 	ifFalse: [self error: 'invalid input']! !!Monom methodsFor: 'coef' stamp: 'db 4/1/2022 18:04'!coef	^coef! !!Monom methodsFor: 'coef' stamp: 'db 4/1/2022 22:00'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue: [coef  := anInteger] 	ifFalse: [self error: 'invalid input']! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'instance methods' stamp: '5 4/12/2022 18:09'!add: aPolyStream	(aPolyStream isKindOf: PolyStream)	ifFalse: [self error: 'invalid input'.]	ifTrue: [			|secBlock  secPolynom|			secBlock := aPolyStream block.			secPolynom := Dictionary new.			secPolynom addAll: (secBlock value). 			secPolynom keysAndValuesDo: [:aKey :aValue | self addCoef: aValue withExp: aKey ].			]! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 06:47'!addCoef: coef withExp: exp	((exp isInteger) and:[coef isInteger] and: [exp >= 0])	ifFalse: [self error: 'invalid input'.]	ifTrue: [			| currblock newpoly currCoef |			currblock := self block. 			newpoly := Dictionary new.			newpoly addAll: (currblock value). 			currCoef := newpoly at:exp ifAbsent:[newpoly at:exp put: 0].            	(currCoef ~= 0)			ifTrue:[newpoly add: exp->(coef+currCoef)]				ifFalse:[newpoly add: exp->coef].						block := [newpoly].					]! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/12/2022 15:48'!block	^block! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 05:45'!eval: anInteger	(anInteger isInteger)	ifFalse: [self error: 'invalid input']	ifTrue: [			|res|			res :=0.			((self block) value) keysAndValuesDo: [:akey :avalue |			res := res + (avalue * (anInteger raisedTo: akey))].			^res.			]! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 05:40'!filter: aSet    (aSet isKindOf: Set)	ifFalse: [self error: 'invalid input'.]	ifTrue: [			|currblock copy newpoly |			currblock := self block. 			newpoly := Dictionary new.			newpoly addAll: (currblock value).			copy := Set new.			copy := aSet deepCopy. 			copy do: [:exp | newpoly removeKey: exp ifAbsent:[] ].			block := [newpoly].			]! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 02:56'!initialize	| newpoly |	newpoly := Dictionary new.	block := [newpoly].! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 06:47'!multiplyBy: anInteger		((anInteger isInteger) )	ifFalse: [self error: 'invalid input'.]	ifTrue: [ 			|currblock newpoly|		      currblock := self block.			newpoly := Dictionary new.			newpoly addAll:(currblock value).			newpoly keysAndValuesDo: [:akey :avalue |			newpoly add: akey-> (avalue * anInteger)].			block := [newpoly].			]! !!PolyStream methodsFor: 'instance methods' stamp: '5 4/13/2022 06:47'!substitute: anInteger 	((anInteger isInteger) and:[anInteger ~= 0] )	ifFalse: [self error: 'invalid input'.]	ifTrue: [ 			|currblock newpoly|		      currblock := self block.			newpoly := Dictionary new.			newpoly addAll:(currblock value).			newpoly keysAndValuesDo: [:akey :avalue |			newpoly add: akey-> (avalue *(anInteger raisedTo: akey))].			block := [newpoly].			]! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'methods' stamp: 'db 4/3/2022 19:12'!add: aPolynom|res|res := Polynom new.res initialize.(aPolynom isKindOf: Polynom)ifTrue: [	aPolynom monoms do: [:it| res addMonom: it.].	monoms do: [:it| res addMonom: it.].	^res	]ifFalse:[self error: 'invalid input'].! !!Polynom methodsFor: 'methods' stamp: 'db 4/6/2022 13:35'!addMonom: aMonom |addTo|	addTo:=False .	(aMonom isKindOf: Monom)	ifTrue: 		[		(aMonom coef = 0) 		ifFalse:[		monoms do: 			[:a| 			(a exp = aMonom exp)			ifTrue: [					a coef: (a coef + aMonom coef).					addTo:= True.					(a coef = 0)						ifTrue: [monoms remove: a ]					]			].			(addTo = False)			ifTrue: [monoms add: aMonom copy ].		]	]	ifFalse: [self error: 'invalid input']! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 21:09'!asDictionary|dict|dict := Dictionary new.monoms do:	[:it|		(it coef = 0)		ifFalse: [dict add: it exp -> it coef ]	].^dict! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 22:01'!derivative|poly|poly :=	Polynom new.poly initialize.monoms do: 	[	:it |		((it derivative coef )= 0)		ifFalse: [poly addMonom: (it derivative)]	].^poly! !!Polynom methodsFor: 'methods' stamp: 'db 4/6/2022 14:15'!eval: anInteger|res|res := 0.(anInteger isKindOf: Integer)ifTrue: [	monoms do: [:it|		res:= res + ((it coef)*(anInteger raisedTo:(it exp))).		].	^res	]ifFalse: [self error: 'invalid input']! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 22:10'!integral |poly|poly := Polynom new.poly initialize .monoms do:[	:it |	poly addMonom: (it integral )	].^poly! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 17:45'!monoms	^monoms! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 20:47'!multiplyByMonom: aMonom(aMonom isKindOf: Monom )ifTrue: 	[	(aMonom coef = 0) 	ifTrue: [monoms removeAll. monoms initialize]	ifFalse:		[		monoms do: 			[ :it |					it exp: (it exp) + (aMonom exp).					it coef: (it coef )*(aMonom coef).			].		]	]ifFalse: [self error: 'invalid input'.]! !!Polynom methodsFor: 'initialize-release' stamp: 'db 4/2/2022 17:26'!initialize |monom|	monoms := OrderedCollection new.	monom := Monom new .	monom initialize.	monoms add: monom.		! !