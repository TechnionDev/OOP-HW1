Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-HW1'!!Monom methodsFor: 'math' stamp: 'db 4/2/2022 15:35'!derivative | newMonom|	newMonom := Monom new.	(self exp = 0)	ifTrue: [newMonom coef: (self coef) * (self exp); exp: (self exp)-1. ^newMonom]	ifFalse: [newMonom initialize. ^newMonom]	! !!Monom methodsFor: 'math' stamp: 'db 4/2/2022 15:54'!integral |newMonom|	newMonom := Monom new.	newMonom coef: ((self coef)//((self exp)+1)).	newMonom exp: ((self exp)+1).	^newMonom	! !!Monom methodsFor: 'initialize-release' stamp: 'db 4/1/2022 22:04'!initialize	coef := 0.	exp:= 0.! !!Monom methodsFor: 'exp' stamp: 'db 4/1/2022 18:04'!exp 	^exp	! !!Monom methodsFor: 'exp' stamp: 'db 4/1/2022 22:04'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger>=0])	ifTrue: [exp := anInteger] 	ifFalse: [self error: 'invalid input']! !!Monom methodsFor: 'coef' stamp: 'db 4/1/2022 18:04'!coef	^coef! !!Monom methodsFor: 'coef' stamp: 'db 4/1/2022 22:00'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue: [coef  := anInteger] 	ifFalse: [self error: 'invalid input']! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP-HW1'!!Polynom methodsFor: 'methods' stamp: 'db 4/3/2022 19:12'!add: aPolynom|res|res := Polynom new.res initialize.(aPolynom isKindOf: Polynom)ifTrue: [	aPolynom monoms do: [:it| res addMonom: it.].	monoms do: [:it| res addMonom: it.].	^res	]ifFalse:[self error: 'invalid input'].! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 18:12'!addMonom: aMonom |toAdd|(aMonom isKindOf: Monom )ifTrue: 	[	(aMonom coef = 0)	ifTrue: 		["nothing to do"]	ifFalse: 		[		toAdd := True.		monoms do:			[ :it |				(it exp = aMonom exp) 				ifTrue: 				[					toAdd := False.					((it coef + aMonom coef) = 0)					ifTrue: [monoms remove: it]					ifFalse: [it coef: (it coef + aMonom coef)]				]			].		(toAdd)		ifTrue: [monoms add: aMonom copy].		]	]ifFalse: [self error: 'invalid input'.]! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 21:09'!asDictionary|dict|dict := Dictionary new.monoms do:	[:it|		(it coef = 0)		ifFalse: [dict add: it exp -> it coef ]	].^dict! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 22:01'!derivative|poly|poly :=	Polynom new.poly initialize.monoms do: 	[	:it |
		((it derivative coef )= 0)		ifFalse: [poly addMonom: (it derivative)]	].^poly! !!Polynom methodsFor: 'methods' stamp: 'db 4/3/2022 19:08'!eval: anInteger|res|res := 0.(anInteger isKindOf: Integer)ifTrue: [	monoms do: [:it|		res= res + ((it coef)*(anInteger raisedTo:(it exp))).		].	^res	]ifFalse: [self error: 'invalid input']! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 22:10'!integral |poly|poly := Polynom new.poly initialize .monoms do:[	:it |	poly addMonom: (it integral )	].^poly! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 17:45'!monoms	^monoms! !!Polynom methodsFor: 'methods' stamp: 'db 4/2/2022 20:47'!multiplyByMonom: aMonom(aMonom isKindOf: Monom )ifTrue: 	[	(aMonom coef = 0) 	ifTrue: [monoms removeAll. monoms initialize]	ifFalse:		[		monoms do: 			[ :it |					it exp: (it exp) + (aMonom exp).					it coef: (it coef )*(aMonom coef).			].		]	]ifFalse: [self error: 'invalid input'.]! !!Polynom methodsFor: 'initialize-release' stamp: 'db 4/2/2022 17:26'!initialize |monom|	monoms := OrderedCollection new.	monom := Monom new .	monom initialize.	monoms add: monom.		! !